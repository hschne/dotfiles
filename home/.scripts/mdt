#!/usr/bin/env bash

set -euo pipefail

function main() {
  local rows=0
  local cols=0
  local copy_to_clipboard=false

  # Parse command-line arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      usage
      ;;
    -c | --copy)
      copy_to_clipboard=true
      shift
      ;;
    -*)
      die "Unknown option: $1"
      ;;
    *)
      # First non-flag argument is rows
      if [[ $rows -eq 0 ]]; then
        rows="$1"
      # Second non-flag argument is columns
      elif [[ $cols -eq 0 ]]; then
        cols="$1"
      else
        die "Too many arguments. Expected: rows columns"
      fi
      shift
      ;;
    esac
  done

  # Check if required arguments are provided
  if [[ $rows -eq 0 || $cols -eq 0 ]]; then
    die "Error: Please provide both rows and columns as positive integers"
  fi

  # Validate inputs
  validate_input "$rows" "Rows"
  validate_input "$cols" "Columns"

  # Generate the table
  if [[ "$copy_to_clipboard" == true ]]; then
    # Check if xclip is available
    if ! command -v xclip >/dev/null 2>&1; then
      die "xclip is not installed. Please install it to use the clipboard feature."
    fi
    # Generate table and pipe to clipboard
    generate_table "$rows" "$cols" | xclip -selection clipboard
    echo "Table copied to clipboard."
  else
    generate_table "$rows" "$cols"
  fi

  return 0
}

# Show usage information
usage() {
  cat <<EOF
Usage: mdt [OPTIONS] ROWS COLUMNS

Generate a markdown table with the specified number of rows and columns.

Arguments:
  ROWS          Number of rows in the table (positive integer)
  COLUMNS       Number of columns in the table (positive integer)

Options:
  -h, --help    Display this help message and exit
  -c, --copy    Copy the generated table to clipboard (requires xclip)

Examples:
  mdt 2 2       # Generate a 2x2 markdown table
  mdt 3 5       # Generate a 3x5 markdown table
  mdt -c 2 3    # Generate a 2x3 table and copy to clipboard
EOF
  exit 0
}

# Function to print error message and exit
die() {
  local message=$1
  local code=${2:-1}
  echo "Error: $message" >&2
  exit "$code"
}

# Validate that input is a positive integer
validate_input() {
  local value=$1
  local name=$2

  if ! [[ "$value" =~ ^[0-9]+$ ]]; then
    die "$name must be a positive integer"
  fi

  if [[ "$value" -lt 1 ]]; then
    die "$name must be greater than 0"
  fi
}

# Generate the complete markdown table
generate_table() {
  local rows=$1
  local cols=$2

  # Generate header row
  echo -n "|"
  for ((i = 1; i <= cols; i++)); do
    printf " %-10s |" "Column $i"
  done
  echo ""

  # Generate separator row
  echo -n "|"
  for ((i = 1; i <= cols; i++)); do
    printf " %-10s |" "----------"
  done
  echo ""

  # Generate content rows
  for ((r = 1; r <= rows; r++)); do
    echo -n "|"
    for ((c = 1; c <= cols; c++)); do
      printf " %-10s |" "$r,$c"
    done
    echo ""
  done
}

main "$@"
